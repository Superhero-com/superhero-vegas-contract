// ISC License
//
// Copyright (c) 2017, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.


// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST



@compiler >= 6

include "String.aes"
include "List.aes"

payable contract VegasMarketContact =


    datatype event =
        //Add Market Event
        AddMarketEvent(address, string)

        //Submit Event
        | SubmitAnswerEvent(address, string, address, int)

        //Recoive Event
        | ReceiveReward(address, int, int)


    record state = {

        //The full content of the forecast, the forecast content of the ID predicted by 
        //which user (user, map(forecast ID, forecast details)),
        //and the details page can be accessed directly using Address + ID
        markets                     : map(address, map(string, market)),

        //The ongoing forecast can be understood as a cache classification
        //of the total forecast for display on the home page and my initiated page display of the personal forecast
        markets_start               : map(address, map(string, market)),

        //I've been involved in forecasting incentives,
        //I've been involved in that forecasting myself and who it was
        markets_record              : map(address, list(market_rocord)),

        //User voting records, used to detect whether the current user has voted, 
        //which account posted which predicted which results of that user's vote
        user_markets_record         : map(address, map(string, map(address, int))),

        //User award records, which account published which forecast
        //the amount of money that the user received
        user_markets_receive_record : map(address, map(string, map(address, int))),
       
        //A set of predicted results
        oracle_market               : map(string, list(int)),
       
        //The number of times that have been predicted
        oracle_market_count         : map(string, int),
        
        //Records of judges' votes for post-review purposes
        oracle_market_record        : map(string, map(address, int)),
       
        //Contract owner
        owner                       : address,
        
        //The judge account
        aggregator_user             : map(address, string),

        //Method of safety certificate
        certificate                 : map(string, address),

        //Who the security certificate belongs to
        certificate_people          : map(address, string),

        //Total number of predictions
        all_count                   : int,

        //Total forecast amount
        all_amount                  : int,
        
        //config file
        config                      : config}


    record market = {
        
        //Prediction ID SHA256 (address + timestamp)
        market_id      : string,
       
        //Publisher owner
        owner          : address,
       
        //Content, for presentation to the user
        content        : string,
        
        //Gets the address of the result for viewing
        source_url     : string,
        
        //Possible outcomes
        answers        : list(answer),

        //Creation time
        create_time    : int,

        //End time
        over_height    : int,

        //Maximum number of bets
        max_people     : int,

        //Minimum number of bets
        min_amount     : int,

        //How many bets have been placed on the current topic
        total_amount   : int,

        //How many themes have been collected
        receive_amount : int,

        //How many people have placed bets
        put_count      : int,

        //How many people received the bonus
        receive_count  : int,

        //The final result
        result         : int,

        //What is the current schedule
        progress       : int,

        //Types of predictions
        market_type    : int}



    record answer = {

        //The content of the answer
        content  : string,

        //The number of times you choose an answer
        count    : int}


    record market_rocord = {
        //Prediction ID SHA256 (address + timestamp)
        market_id        : string,

        //Predict publisher address
        owner            : address,

        //topic
        content          : string,

        //The amount of money wagered
        amount           : int,

        //Result of selection Contnet
        put_result       : string,

        ///Result of selection Index
        put_result_index : int,

        //Choose when it happens
        put_time         : int,

        //Select the height at which it occurs
        put_height       : int}


    record market_detail = {
        market                         : market,
        is_oracle_market_record        : bool,
        is_user_markets_record         : bool,
        get_user_markets_record_result : int,
        is_user_markets_receive_record : bool,
        get_oracle_market_record       : map(address, int),
        get_aggregator_user            : map(address, string)}

    record config = {
        decimals              : int,
        //The number of times the trigger prediction has been completed
        oracle_trigger_count  : int,

        //Predict the minimum time limit
        market_min_height     : int,

        //Predict the maximum time limit
        market_max_height     : int,

        //Predict the minimum amount limit
        market_min_amount     : int,

        //Predict the maximum amount limit
        market_max_amount     : int,

        //Maximum number of cached transaction records
        record_max_count      : int,

        //Predict the maximum time limit
        market_max_people     : int,

        //Platform dividend account address
        platform_address      : address,

        //Address of the foundation's dividend sharing account
        foundation_address    : address,

        //Percentage of platform dividends
        platform_percentage   : int,

        //Foundation percentage
        foundation_percentage : int,

        //Percentage of founder's dividend
        create_percentage     : int}


    stateful entrypoint
        init : () => state
        init () =
            let owner                     = Call.caller
            let decimals                  = 1000000000000000000
            { markets                     = {},
              markets_start               = {},
              markets_record              = {},
              user_markets_record         = {},
              user_markets_receive_record = {},
              oracle_market               = {},
              oracle_market_count         = {},
              oracle_market_record        = {},
              owner                       = Call.caller,
              aggregator_user             = {},
              certificate                 = {},
              certificate_people          = {},
              all_count                   = 0,
              all_amount                  = 0,
              config                      = {
                    decimals              = decimals,
                    oracle_trigger_count  = 3,
                    market_min_height     = 1,
                    market_max_height     = 480 * 30,
                    market_min_amount     = decimals / 100,
                    market_max_amount     = decimals * 1000,
                    record_max_count      = 10,
                    market_max_people     = 10,
                    platform_address      = ak_CNcf2oywqbgmVg3FfKdbHQJfB959wrVwqfzSpdWVKZnep7nj4,
                    foundation_address    = ak_CNcf2oywqbgmVg3FfKdbHQJfB959wrVwqfzSpdWVKZnep7nj4,
                    platform_percentage   = 850,
                    foundation_percentage = 150,
                    create_percentage     = 500}}


    stateful entrypoint
        add_market : (string, string, int, int, list(answer)) => market
        add_market (content, source_url, min_amount, over_height, answers) =
            //The minimum end time must be later than the configured time, for example, 1 day later than the current time or less than 30 days
            require(over_height >= state.config.market_min_height, "Over time more than min required")
            require(over_height =< state.config.market_max_height, "Over time more than max required")
            
            //Maximum and minimum amount limit
            require(min_amount =< state.config.market_max_amount, "Market max amount error")
            require(min_amount >= state.config.market_min_amount, "Market min amount error")
           
            //Content restrictions
            require(String.length(content) =< 500, "Market conent length > 500 character")
            require(String.length(source_url) =< 100, "Market source_url length > 100 character")

            //Limit the number of start operations
            require(Map.size(get_markets_start(Call.caller,true)) =< 15, "Market count length > 15")
            
            //The number of times the answer is verified does not equal the default state to throw an error
            List.foreach(answers, (item) => require(item.count == 0 && String.length(item.content) < 20 ,"Answer count error or conent length > 20"))

            //Generate forecast ID
            let market_id = generate_market_id()

            //Check for duplicate ids
            restrict_repeat_market(Call.caller,market_id)


            let market_type = get_market_type()

            let market = {
                market_id      = market_id,
                owner          = Call.caller,
                content        = content,
                source_url     = source_url,
                answers        = answers,
                create_time    = Chain.timestamp,
                over_height    = Chain.block_height + over_height,
                max_people     = get_max_people(),
                min_amount     = min_amount,
                total_amount   = 0,
                receive_amount = 0,
                put_count      = 0,
                receive_count  = 0,
                result         = -1,
                progress       = 0,
                market_type    = market_type}

            put(state {markets[Call.caller = {}][market_id] = market})
            put(state {markets_start[Call.caller = {}][market_id] = market})
            put(state {all_count @n = n + 1})

            if(market_type == 1)
                put(state {oracle_market_count[market_id] = 0})
                put(state {oracle_market[market.market_id] = []})

            Chain.event(AddMarketEvent(Call.caller,market_id))
            market




    payable stateful entrypoint
        submit_answer : (address, string, int) => bool
        submit_answer (market_address,market_id,answer_index) =

            let market = get_market(market_address,market_id)

            //Restrictions on end time, minimum amount, progress, whether a bet has been made, and maximum number of people
            require(Chain.block_height =< market.over_height          , "Market time out")
            require(Call.value         == market.min_amount           , "Market amount low out")
            require(market.progress    == 0                           , "Market progress is not start")
            require(market.max_people  >  market.put_count            , "Market max people many")
            require(!is_user_markets_record(market_address, market_id), "User markets repeat")

            let answer = get_market_answer(market_address,market_id,answer_index)
            let new_answer = {
                content    = answer.content,
                count      = answer.count + 1}

            //Update the contract information
            let new_answers = List.replace_at(
                answer_index, 
                new_answer  , 
                state.markets[market_address][market_id].answers)
            
            put(state {markets[market_address][market_id].answers         = new_answers})
            put(state {markets[market_address][market_id].total_amount @n = n + Call.value})
            put(state {markets[market_address][market_id].put_count @n    = n + 1})

            //add user markets record
            put(state {user_markets_record[market_address = {}][market_id = {}][Call.caller] = answer_index})

            //update market to start status
            put(state {markets_start[market_address = {}][market_id] = state.markets[market_address][market_id]})

            //Generate betting record
            let market_rocord = {
                market_id        = market_id,
                owner            = market_address,
                content          = market.content,
                amount           = Call.value,
                put_result       = new_answer.content,
                put_result_index = answer_index,
                put_time         = Chain.timestamp,
                put_height       = Chain.block_height}
            let records = get_market_records(Call.caller)

            //A maximum of N items can be displayed according to the contract limit
            if(List.length(records) >= state.config.record_max_count)
                let market_records = List.reverse(records)
                let market_records = List.drop(List.length(market_records) - 1, market_records)
                let market_records = List.reverse(market_records)
                let market_records = List.insert_at(0, market_rocord, market_records)
                put(state{ markets_record[Call.caller] = market_records})
            else
                let market_records = List.insert_at(0, market_rocord, records)
                put(state{ markets_record[Call.caller] = market_records})
            
            //Update the total bet count
            put(state {all_amount @n = n + market.min_amount / state.config.decimals})
            Chain.event(SubmitAnswerEvent(market_address, market_id, Call.caller, answer_index))
            true


    stateful entrypoint
        provide_answer : (address,string,int) =>bool
        provide_answer (market_address,market_id,market_index) =

            let market = get_market(market_address,market_id)

            //Verify that the supplied data is valid
            require(market_index       <  List.length(market.answers), "Index out error")
            require(market_index       >= 0                          , "Index out error 0")
            require(market.market_type == 1                          , "Market type error")
            require(market.progress    == 0                          , "Market progress is not start")
            require(Chain.block_height >  market.over_height         , "Market time not out")
            
            //Validates the provider
            require(is_aggregator_user()               , "Aggregator error")
            require(!is_oracle_market_record(market_id), "Provide count more")

            //Generate the latest data
            let provide_data = List.insert_at(0, market_index, state.oracle_market[market_id])

            //Update contract data
            put(state{oracle_market[market_id]                          = provide_data})
            put(state{oracle_market_record[market_id = {}][Call.caller] = market_index})
            put(state{oracle_market_count[market_id  = 0] @ n           = n + 1})

            //Common forecast case reaches trigger condition, update to finished
            if(get_oracle_market_provide_count(market_id) >= state.config.oracle_trigger_count && is_repeat(state.oracle_market[market_id]))
                //Delete the prediction in progress because it is over
                put(state {markets_start[market_address] = Map.delete(market_id,state.markets_start[market_address])})
            
                //Update the status to the Ended state
                put(state {markets[market_address][market_id].progress = 2})
                
                //Calculate which vote has the most votes, and then set the final result
                let reward_num = most_of(state.oracle_market[market_id])
                
                //Set the final award result
                put(state {markets[market_address][market_id].result = reward_num})

            true





    stateful entrypoint
        private_update_market_progress_to_over : (address,string,int)=>bool
        private_update_market_progress_to_over (market_address,market_id,result_index) =

            let market = get_market(market_address,market_id)

            //Verify the content
            require(market.owner        == Call.caller                , "Market time not out")
            require(result_index        <  List.length(market.answers), "Index out error")
            require(Chain.block_height  >  market.over_height         , "Market time not out")
            require(market.market_type  == 0                          , "Market type error")
            require(market.progress     == 0                          , "Market progress is not start")

            //Delete the prediction in progress because it is over
            put(state {markets_start[market_address] = Map.delete(market_id,state.markets_start[market_address])})

            //Update to over
            put(state {markets[market_address][market_id].progress = 2})

            //Update result
            put(state {markets[market_address][market_id].result = result_index})
            true




    //领取奖金
    stateful entrypoint
        receive_reward : (address,string)=>int
        receive_reward (market_address,market_id) =

            let market = get_market(market_address, market_id)  

            //Verification claim restriction
            require(market.progress == 2                                                        , "The game is not over yet")
            require(market.result   == get_user_markets_record_result(market_address, market_id), "Your vote does not match the final result")
            require(!is_user_markets_receive_record(market_address, market_id)                  , "You can't double claim the bonus")
            require(is_user_markets_record(market_address, market_id)                           , "You didn't participate in the prediction")
            
            let answer = get_market_answer(market_address, market_id, market.result)

            //Calculate the amount to be claimed
            let amount = market.total_amount / answer.count

            //Set how much has been claimed
            put(state {markets[market_address][market_id].receive_amount  @ n = n + amount})
            put(state {markets[market_address][market_id].receive_count  @ n = n + 1})

            //Share out bonus
            Chain.spend(state.config.platform_address, calculate_amount(amount, state.config.platform_percentage))
            Chain.spend(state.config.foundation_address, calculate_amount(amount, state.config.foundation_percentage))

            //Calculate the amount the user finally receives
            let user_amount = calculate_amount(
                amount ,
                (10000 - (state.config.platform_percentage + state.config.foundation_percentage +  state.config.create_percentage )))

            //Record the current forecast has received a prize
            put(state {user_markets_receive_record[market_address = {}][market_id  = {}][Call.caller] = user_amount})

            //Public predictions, rewards for judges,Private predictions, reward creators
            if(market.market_type == 1)
                let items : list(address * int)  = Map.to_list(get_oracle_market_record(market_id))
                List.foreach(items, (item) => oracle_spend(item, amount, List.length(items)))
            else
                Chain.spend(market.owner, calculate_amount(amount, state.config.create_percentage))
            
            //Receive user rewards
            Chain.spend(Call.caller, user_amount)
            Chain.event(ReceiveReward(Call.caller, user_amount, market.total_amount))
            user_amount


    stateful entrypoint
        add_certificate : (string) => unit
        add_certificate(name) =
            protocol_restrict()
            switch(AENS.lookup(name))
                Some(AENS.Name(owner, _, _)) =>
                    put(state {certificate[name] = owner})
                    put(state {certificate_people[owner] = name})

                None =>
                    abort("Name not find")

    stateful entrypoint
        delete_certificate:(string) => bool
        delete_certificate (name) =
            protocol_restrict()
            put(state {certificate = Map.delete(name,state.certificate)})
            true

    stateful entrypoint
        add_aggregator_user : (address,string) => address
        add_aggregator_user(account,name) =
            protocol_restrict()
            put(state {aggregator_user[account]= name})
            account

    stateful entrypoint
        delete_aggregator_user:(address) => bool
        delete_aggregator_user (addr) =
            protocol_restrict()
            put(state {aggregator_user = Map.delete(addr,state.aggregator_user)})
            true


    stateful entrypoint
        chagne_owner:(address) => address
        chagne_owner (addr) =
            protocol_restrict()
            put(state {owner = addr})
            addr

    stateful entrypoint
        update_config:(config) => config
        update_config(config) =
            protocol_restrict()
            put(state{config = config})
            config






    entrypoint
        get_markets_start : (address,bool) => map(string, market)
        get_markets_start(market_address,is_private) =
            if(is_private)
                switch(Map.lookup(market_address, state.markets_start))
                    Some(market_map) => market_map
                    None => {}
            else
                switch(Map.lookup(state.owner, state.markets_start))
                    Some(market_map) => Map.from_list(List.filter((item) => is_market_start(item),  Map.to_list(market_map) ))
                    None => {}

    entrypoint
        get_markets_referee : () => map(string, market)
        get_markets_referee() =
            switch(Map.lookup(state.owner, state.markets_start))
                Some(market_map) =>
                    let items = Map.to_list(market_map)
                    Map.from_list(List.filter((item) => is_market_referee(item), items ))

                None => {}



    entrypoint
        get_market_detail : (address,string) => market_detail
        get_market_detail(market_address, market_id) =
            { market                         = get_market(market_address,market_id),
              is_oracle_market_record        = is_oracle_market_record(market_id),
              is_user_markets_record         = is_user_markets_record(market_address, market_id),
              get_user_markets_record_result = get_user_markets_record_result(market_address, market_id),
              is_user_markets_receive_record = is_user_markets_receive_record(market_address, market_id),
              get_oracle_market_record       = get_oracle_market_record(market_id),
              get_aggregator_user            = get_aggregator_user()}



    entrypoint
        get_all_count : ()  => int
        get_all_count () =
            state.all_count


    entrypoint
        get_all_amount : ()  => int
        get_all_amount () =
            state.all_amount


    entrypoint
        get_oracle_market_provide_count : (string) => int
        get_oracle_market_provide_count (market_id) =
            state.oracle_market_count[market_id]

    entrypoint
        get_market : (address,string) => market
        get_market(market_address,market_id) =
            switch(Map.lookup(market_address, state.markets))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(market) =>  market
                        None => abort("Dnt find the market")
                None => abort("Dnt find the market")

    entrypoint
        is_user_markets_receive_record : (address,string) => bool
        is_user_markets_receive_record(market_address,market_id) =
            switch(Map.lookup(market_address, state.user_markets_receive_record))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(account) =>
                            switch(Map.lookup(Call.caller, account))
                                Some(account) =>  true
                                None => false
                        None => false
                None => false

    entrypoint
        is_user_markets_record : (address,string) => bool
        is_user_markets_record(market_address,market_id) =
            switch(Map.lookup(market_address, state.user_markets_record))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(account) =>
                            switch(Map.lookup(Call.caller, account))
                                Some(account) =>  true
                                None => false
                        None => false
                None => false

    entrypoint
        get_user_markets_record_result : (address,string) => int
        get_user_markets_record_result(market_address,market_id) =
            switch(Map.lookup(market_address, state.user_markets_record))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(account) =>
                            switch(Map.lookup(Call.caller, account))
                                Some(result) =>  result
                                None => -1
                        None => -1
                None => -1

    entrypoint
        get_user_markets_record : (address,string) => map(address,int)
        get_user_markets_record(market_address,market_id) =
            switch(Map.lookup(market_address, state.user_markets_record))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(account) => account
                        None => {}
                None => {}




    entrypoint
        get_markets_start_size : (address) => int
        get_markets_start_size(market_address) =
            switch(Map.lookup(market_address, state.markets_start))
                Some(market_map) =>
                    Map.size(market_map)
                None => 0


    entrypoint
        is_oracle_market_record : (string) => bool
        is_oracle_market_record(market_id) =
            switch(Map.lookup(market_id, state.oracle_market_record))
                Some(market_record_user) =>
                    switch(Map.lookup(Call.caller, market_record_user))
                        Some(result) =>  true
                        None => false
                None => false

    entrypoint
        get_aggregator_user:() => map(address, string)
        get_aggregator_user () =
            state.aggregator_user

    entrypoint
        get_oracle_market_record:(string) => map(address, int)
        get_oracle_market_record (market_id) =
            switch(Map.lookup(market_id, state.oracle_market_record))
                Some(market_record_user) => market_record_user
                None => {}

    entrypoint
        get_market_records : (address) => list(market_rocord)
        get_market_records(addr) =
            switch(Map.lookup(addr, state.markets_record))
                Some(records) => records
                None => []

    entrypoint
        get_market_records_size : (address) => int
        get_market_records_size(addr) =
            switch(Map.lookup(addr, state.markets_record))
                Some(records) => List.length(records)
                None => 0

    entrypoint
        get_config:() => config
        get_config () =
            state.config

    entrypoint
        get_owner:() => address
        get_owner () =
            state.owner


    entrypoint
        get_state:()=>state
        get_state () =
            state
            
    entrypoint
        is_repeat : (list(int)) => bool
        is_repeat((x :: xs) ) =
            if(is_repeat_(x, {[x] = 1}, xs) == 1)false
            else true


    stateful function
        get_max_people : () => int
        get_max_people() =
            if(state.owner == Call.caller) 10000000
            else
                List.foreach(Map.to_list(state.certificate), (item) => update_name_address(item))
                switch(Map.lookup(Call.caller, state.certificate_people))
                    Some(v) => 10000000
                    None => state.config.market_max_people

    stateful function
        update_name_address : ((string * address)) => unit
        update_name_address((name, addr)) =
            switch(AENS.lookup(name))
                Some(AENS.Name(owner, _, _)) =>
                    put(state {certificate[name] = owner})
                    put(state {certificate_people[owner] = name})


    stateful function
        oracle_spend : ((address * int), int, int) => unit
        oracle_spend((a, c), amount,length) =
            Chain.spend(a, calculate_amount(amount, state.config.create_percentage / length))


    function
        is_market_start : ((string * market)) => bool
        is_market_start((market_id, market)) =
            if(market.over_height >= Chain.block_height)
                true
            else
                false


    function
        is_market_referee : ((string * market)) => bool
        is_market_referee((market_id, market)) =
            if(Chain.block_height > market.over_height)
                true
            else
                false

    function
        calculate_amount : (int, int) => int
        calculate_amount (amount, proportion) =
            amount / 10000 * proportion

    function
        restrict_repeat_market : (address,string) => bool
        restrict_repeat_market(market_address,market_id) =
            switch(Map.lookup(market_address, state.markets))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(market) => abort("Market ID Repeat")
                        None => true
                None => true

    function
        is_aggregator_user : () => bool
        is_aggregator_user() =
            switch(Map.lookup(Call.caller, state.aggregator_user))
                Some(user) => true
                None => false

    function
        get_market_type : () => int
        get_market_type() =
            if(state.owner == Call.caller) 1
            else 0

    function
        get_market_answer : (address,string,int) => answer
        get_market_answer(market_address, market_id, answer_index) =
            switch(Map.lookup(market_address, state.markets))
                Some(market_map) =>
                    switch(Map.lookup(market_id, market_map))
                        Some(market) =>  List.get(answer_index, market.answers)
                        None => abort("This option was not found")
                None => abort("This option was not found")


    function
        protocol_restrict : () => unit
        protocol_restrict() =
            require(Call.caller == state.owner, "PROTOCOL_RESTRICTED")


    function
        generate_market_id : () => string
        generate_market_id() =
             Bytes.to_str(Crypto.sha256(String.concat(Address.to_str(Call.caller), Int.to_str(Chain.timestamp))))



    function
        most_of : (list('a)) => 'a
        most_of((x :: xs) ) =
            most_of_(x, {[x] = 1}, xs)


    function
        most_of_ : ('a, map('a, int), list('a)) => 'a
        most_of_(most, counts , xs) =
            switch(xs)
                [] => (most)
                (x :: xs) =>
                    let counts' = counts{ [x = 0] @ n = n + 1 }
                    if (counts'[x] >= counts'[most])
                        most_of_(x, counts', xs)
                    else
                        most_of_(most, counts', xs)



    function
        is_repeat_ : ('a, map('a, int), list('a)) => int
        is_repeat_(most, counts , xs) =
            switch(xs)
                [] => counts[most]
                (x :: xs) =>
                    let counts' = counts{ [x = 0] @ n = n + 1 }
                    if (counts'[x] >= counts'[most])
                        is_repeat_(x, counts', xs)
                    else
                        is_repeat_(most, counts', xs)






